// Code generated by codegen; DO NOT EDIT.

package codegen

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"

{{range .Imports}}	"{{.}}"
{{end}}
)

func {{.TableFuncName}}() *schema.Table {
    return &schema.Table{{template "table.go.tpl" .Table}}
}

{{if .Parent}}
func {{.Table.Resolver}}(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
{{else}}
	func {{.Table.Resolver}}(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
{{end}}
	cl := meta.(*client.Client)
	svc := cl.Services().{{.AWSService | ToCamel}}

{{if .Parent}}
{{template "resolve_parent_defs.go.tpl" .}}
	input := {{.AWSService | ToLower}}.Get{{.AWSSubService}}Input{
{{template "resolve_parent_vars.go.tpl" .}}
	}
{{else}}
	var input {{.AWSService | ToLower}}.Get{{.AWSSubService}}Input
{{end}}
	for {
		response, err := svc.Get{{.AWSSubService}}(ctx, &input)
		if err != nil {
			return diag.WrapError(err)
		}
		res <- response.Items
		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}

{{range .CustomResolvers}}{{.}}
{{end}}
