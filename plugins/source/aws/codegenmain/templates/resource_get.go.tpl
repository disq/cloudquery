// Code generated by codegen using template {{.TemplateFilename}}; DO NOT EDIT.

package {{.AWSService | ToLower}}

import (
	"context"
{{if or .NextTokenName .WrappedNextTokenName}}	"github.com/aws/aws-sdk-go-v2/aws"
{{end}}	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"

{{if .Parent}}	"{{.TypesImport}}"{{end}}
{{range .Imports}}	{{.}}
{{end}}
)

func {{.TableFuncName}}() *schema.Table {
    return &schema.Table{{template "table.go.tpl" .Table}}
}

func {{.Table.Resolver}}(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().{{.AWSService | ToCamel}}

{{template "resolve_parent_defs.go.tpl" .}}
	input := {{.AWSService | ToLower}}.{{.GetMethod}}Input{
{{range .CustomInputs}}{{.}}
{{end}}{{template "resolve_parent_vars.go.tpl" .}}
	}

{{if or .NextTokenName .WrappedNextTokenName}}	for {
{{else}}	{
{{end}}{{if .ItemsCustomOptionsBlock}}		response, err := svc.{{.GetMethod}}(ctx, &input, func(opts *{{.AWSService | ToLower}}.Options) {
{{.ItemsCustomOptionsBlock}}
		}){{else}}		response, err := svc.{{.GetMethod}}(ctx, &input){{end}}
		if err != nil {
			{{.CustomErrorBlock}}
			return diag.WrapError(err)
		}
{{if .ResponseItemsWrapper}}
		if response.{{.ResponseItemsWrapper}} != nil {
			{{if eq .ResponseItemsName "."}}		res <- response.{{.ResponseItemsWrapper}}{{else}}		res <- response.{{.ResponseItemsWrapper}}.{{.ResponseItemsName | Coalesce "Items"}}{{end}}
		{{if .WrappedNextTokenName}}		if aws.ToString(response.{{.ResponseItemsWrapper}}.{{.WrappedNextTokenName}}) == "" {
		break
		}
		input.{{.PageTokenInputField | Coalesce .WrappedNextTokenName}} = response.{{.ResponseItemsWrapper}}.{{.WrappedNextTokenName}}{{end}}
		}
{{if not .NextTokenName}}	if response.{{.ResponseItemsWrapper}} == nil {
		break
	}{{end}}
{{else}}
{{if eq .ResponseItemsName "."}}		res <- response{{else}}		res <- response.{{.ResponseItemsName | Coalesce "Items"}}{{end}}
{{end}}
{{if .NextTokenName}}		if aws.ToString(response.{{.NextTokenName}}) == "" {
			break
		}
		input.{{.PageTokenInputField | Coalesce .NextTokenName}} = response.{{.NextTokenName}}{{end}}
	}
	return nil
}
