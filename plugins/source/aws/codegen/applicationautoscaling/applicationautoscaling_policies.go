// Code generated by codegen; DO NOT EDIT.

package applicationautoscaling

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
)

func ApplicationAutoscalingPolicies() *schema.Table {
	return &schema.Table{
		Name:      "aws_applicationautoscaling_policies",
		Resolver:  fetchApplicationAutoscalingPolicies,
		Multiplex: client.ServiceAccountRegionMultiplexer("application-autoscaling"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:        "namespace",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSNamespace,
				Description: `The AWS Service Namespace of the resource.`,
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PolicyARN"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PolicyName"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PolicyType"),
			},
			{
				Name:     "resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceId"),
			},
			{
				Name:     "scalable_dimension",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ScalableDimension"),
			},
			{
				Name:     "service_namespace",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ServiceNamespace"),
			},
			{
				Name:     "alarms",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Alarms"),
			},
			{
				Name:     "step_scaling_policy_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("StepScalingPolicyConfiguration"),
			},
			{
				Name:     "target_tracking_scaling_policy_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TargetTrackingScalingPolicyConfiguration"),
			},
		},
	}
}

func fetchApplicationAutoscalingPolicies(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().ApplicationAutoscaling

	input := applicationautoscaling.DescribeScalingPoliciesInput{
		ServiceNamespace: types.ServiceNamespace(cl.AutoscalingNamespace),
	}

	for {
		response, err := svc.DescribeScalingPolicies(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}
		res <- response.ScalingPolicies
		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
