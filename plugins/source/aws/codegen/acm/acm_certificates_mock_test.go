// Code generated by codegen; DO NOT EDIT.

package acm

import (
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"

	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client/mocks"
	"github.com/cloudquery/faker/v3"
	"github.com/golang/mock/gomock"

	"github.com/aws/aws-sdk-go-v2/service/acm"
	"github.com/aws/aws-sdk-go-v2/service/acm/types"
)

func buildACMCertificates(t *testing.T, ctrl *gomock.Controller) client.Services {
	mock := mocks.NewMockACMClient(ctrl)

	var item types.CertificateSummary
	if err := faker.FakeData(&item); err != nil {
		t.Fatal(err)
	}
	mock.EXPECT().ListCertificates(
		gomock.Any(),
		&acm.ListCertificatesInput{},
		gomock.Any(),
	).Return(
		&acm.ListCertificatesOutput{
			CertificateSummaryList: []types.CertificateSummary{item},
		},
		nil,
	)

	var detail types.CertificateDetail
	if err := faker.FakeData(&detail); err != nil {
		t.Fatal(err)
	}

	detail.CertificateArn = item.CertificateArn

	mock.EXPECT().DescribeCertificate(
		gomock.Any(),
		&acm.DescribeCertificateInput{

			CertificateArn: item.CertificateArn,
		},
		gomock.Any(),
	).Return(
		&acm.DescribeCertificateOutput{
			Certificate: &detail,
		},
		nil,
	)

	mock.EXPECT().ListTagsForCertificate(
		gomock.Any(),
		&acm.ListTagsForCertificateInput{

			CertificateArn: item.CertificateArn,
		},
	).Return(
		&acm.ListTagsForCertificateOutput{
			Tags: []types.Tag{
				{Key: aws.String("key"), Value: aws.String("value")},
			},
		},
		nil,
	)

	return client.Services{
		ACM: mock,
	}
}

func TestACMCertificates(t *testing.T) {
	client.AwsMockTestHelper(t, ACMCertificates(), buildACMCertificates, client.TestOptions{})
}
