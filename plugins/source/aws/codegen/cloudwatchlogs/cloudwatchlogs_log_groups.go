// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package cloudwatchlogs

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
)

func CloudwatchLogsLogGroups() *schema.Table {
	return &schema.Table{
		Name:      "aws_cloudwatchlogs_log_groups",
		Resolver:  fetchCloudwatchLogsLogGroups,
		Multiplex: client.ServiceAccountRegionMultiplexer("logs"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Arn"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "kms_key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("KmsKeyId"),
			},
			{
				Name:     "log_group_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LogGroupName"),
			},
			{
				Name:     "metric_filter_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MetricFilterCount"),
			},
			{
				Name:     "retention_in_days",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RetentionInDays"),
			},
			{
				Name:     "stored_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("StoredBytes"),
			},
		},
	}
}

func fetchCloudwatchLogsLogGroups(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().CloudwatchLogs

	input := cloudwatchlogs.DescribeLogGroupsInput{}

	for {
		response, err := svc.DescribeLogGroups(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		res <- response.LogGroups

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
