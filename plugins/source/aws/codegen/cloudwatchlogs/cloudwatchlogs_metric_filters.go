// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package cloudwatchlogs

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
)

func CloudwatchLogsMetricFilters() *schema.Table {
	return &schema.Table{
		Name:      "aws_cloudwatchlogs_metric_filters",
		Resolver:  fetchCloudwatchLogsMetricFilters,
		Multiplex: client.ServiceAccountRegionMultiplexer("logs"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "filter_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FilterName"),
			},
			{
				Name:     "filter_pattern",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FilterPattern"),
			},
			{
				Name:     "log_group_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LogGroupName"),
			},
			{
				Name:     "metric_transformations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MetricTransformations"),
			},
		},
	}
}

func fetchCloudwatchLogsMetricFilters(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().CloudwatchLogs

	input := cloudwatchlogs.DescribeMetricFiltersInput{}

	for {
		response, err := svc.DescribeMetricFilters(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		res <- response.MetricFilters

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
