// Code generated by codegen using template resource_list_describe.go.tpl; DO NOT EDIT.

package backup

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/backup"
)

func BackupBackupPlansBackupSelections() *schema.Table {
	return &schema.Table{
		Name:      "aws_backup_backup_plans_backup_selections",
		Resolver:  fetchBackupBackupPlansBackupSelections,
		Multiplex: client.ServiceAccountRegionMultiplexer("backup"),
		Columns: []schema.Column{
			{
				Name:     "backup_plan_cq_id",
				Type:     schema.TypeUUID,
				Resolver: schema.ParentIdResolver,
			},
			{
				Name:     "backup_plan_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BackupPlanId"),
			},
			{
				Name:     "backup_selection",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BackupSelection"),
			},
			{
				Name:     "creation_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationDate"),
			},
			{
				Name:     "creator_request_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreatorRequestId"),
			},
			{
				Name:     "selection_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SelectionId"),
			},
			{
				Name:     "result_metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResultMetadata"),
			},
		},
	}
}

func fetchBackupBackupPlansBackupSelections(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Backup

	r1 := parent.Item.(backup.GetBackupPlanOutput)

	input := backup.ListBackupSelectionsInput{
		MaxResults:   aws.Int32(1000),
		BackupPlanId: r1.BackupPlanId,
	}
	paginator := backup.NewListBackupSelectionsPaginator(svc, &input)
	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {

			return diag.WrapError(err)
		}

		for _, item := range output.BackupSelectionsList {

			do, err := svc.GetBackupSelection(ctx, &backup.GetBackupSelectionInput{

				BackupPlanId: item.BackupPlanId,

				SelectionId: item.SelectionId,
			})
			if err != nil {

				if cl.IsNotFoundError(err) {
					continue
				}
				return diag.WrapError(err)
			}
			res <- do
		}
	}
	return nil
}
