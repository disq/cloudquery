// Code generated by codegen; DO NOT EDIT.

package backup

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/backup"
)

func BackupBackupPlans() *schema.Table {
	return &schema.Table{
		Name:      "aws_backup_backup_plans",
		Resolver:  fetchBackupBackupPlans,
		Multiplex: client.ServiceAccountRegionMultiplexer("backup"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "advanced_backup_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AdvancedBackupSettings"),
			},
			{
				Name:     "backup_plan",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BackupPlan"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BackupPlanArn"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BackupPlanId"),
			},
			{
				Name:     "creation_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationDate"),
			},
			{
				Name:     "creator_request_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreatorRequestId"),
			},
			{
				Name:     "deletion_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("DeletionDate"),
			},
			{
				Name:     "last_execution_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastExecutionDate"),
			},
			{
				Name:     "version_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VersionId"),
			},
			{
				Name:     "result_metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResultMetadata"),
			},
		},
	}
}

func fetchBackupBackupPlans(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Backup

	input := backup.ListBackupPlansInput{
		MaxResults: aws.Int32(1000),
	}
	paginator := backup.NewListBackupPlansPaginator(svc, &input)
	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {

			return diag.WrapError(err)
		}
		for _, item := range output.BackupPlansList {
			do, err := svc.GetBackupPlan(ctx, &backup.GetBackupPlanInput{

				BackupPlanId: item.BackupPlanId,

				VersionId: item.VersionId,
			})
			if err != nil {

				if cl.IsNotFoundError(err) {
					continue
				}
				return diag.WrapError(err)
			}
			res <- do
		}
	}
	return nil
}
