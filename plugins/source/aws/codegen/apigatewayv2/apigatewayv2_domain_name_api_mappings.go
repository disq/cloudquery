// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package apigatewayv2

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	resolvers "github.com/cloudquery/cloudquery/plugins/source/aws/codegenmain/resolvers/apigatewayv2"
)

func Apigatewayv2DomainNameApiMappings() *schema.Table {
	return &schema.Table{
		Name:      "aws_apigatewayv2_domain_name_api_mappings",
		Resolver:  fetchApigatewayv2DomainNameApiMappings,
		Multiplex: client.ServiceAccountRegionMultiplexer("apigatewayv2"),
		Columns: []schema.Column{
			{
				Name:     "domainname_cq_id",
				Type:     schema.TypeUUID,
				Resolver: schema.ParentIdResolver,
			},
			{
				Name:     "api_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ApiId"),
			},
			{
				Name:     "stage",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Stage"),
			},
			{
				Name:     "api_mapping_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ApiMappingId"),
			},
			{
				Name:     "api_mapping_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ApiMappingKey"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolvers.ResolveApiMappingArn,
			},
		},
	}
}

func fetchApigatewayv2DomainNameApiMappings(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Apigatewayv2

	r1 := parent.Item.(types.DomainName)

	input := apigatewayv2.GetApiMappingsInput{
		DomainName: r1.DomainName,
	}

	for {
		response, err := svc.GetApiMappings(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		res <- response.Items

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
