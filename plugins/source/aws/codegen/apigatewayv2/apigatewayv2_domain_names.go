// Code generated by codegen; DO NOT EDIT.

package apigatewayv2

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	resolvers "github.com/cloudquery/cloudquery/plugins/source/aws/codegenmain/resolvers/apigatewayv2"
	apigatewayv2fix "github.com/cloudquery/cloudquery/plugins/source/aws/resources/forks/apigatewayv2"
)

func Apigatewayv2DomainNames() *schema.Table {
	return &schema.Table{
		Name:      "aws_apigatewayv2_domain_names",
		Resolver:  fetchApigatewayv2DomainNames,
		Multiplex: client.ServiceAccountRegionMultiplexer("apigatewayv2"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "domain_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DomainName"),
			},
			{
				Name:     "api_mapping_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ApiMappingSelectionExpression"),
			},
			{
				Name:     "domain_name_configurations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DomainNameConfigurations"),
			},
			{
				Name:     "mutual_tls_authentication",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MutualTlsAuthentication"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolvers.ResolveDomainNameArn,
			},
		},
	}
}

func fetchApigatewayv2DomainNames(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Apigatewayv2

	input := apigatewayv2.GetDomainNamesInput{}

	for {
		response, err := svc.GetDomainNames(ctx, &input, func(opts *apigatewayv2.Options) {

			// NOTE: Swapping OperationDeserializer until this is fixed: https://github.com/aws/aws-sdk-go-v2/issues/1282
			opts.APIOptions = append(opts.APIOptions, apigatewayv2fix.SwapGetDomainNamesOperationDeserializer)

		})
		if err != nil {

			return diag.WrapError(err)
		}
		res <- response.Items
		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
