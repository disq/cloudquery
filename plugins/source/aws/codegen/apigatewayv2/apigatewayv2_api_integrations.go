// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package apigatewayv2

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
)

func Apigatewayv2ApiIntegrations() *schema.Table {
	return &schema.Table{
		Name:      "aws_apigatewayv2_api_integrations",
		Resolver:  fetchApigatewayv2ApiIntegrations,
		Multiplex: client.ServiceAccountRegionMultiplexer("apigatewayv2"),
		Columns: []schema.Column{
			{
				Name:     "api_gateway_managed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ApiGatewayManaged"),
			},
			{
				Name:     "connection_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConnectionId"),
			},
			{
				Name:     "connection_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConnectionType"),
			},
			{
				Name:     "content_handling_strategy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ContentHandlingStrategy"),
			},
			{
				Name:     "credentials_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CredentialsArn"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "integration_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationId"),
			},
			{
				Name:     "integration_method",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationMethod"),
			},
			{
				Name:     "integration_response_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationResponseSelectionExpression"),
			},
			{
				Name:     "integration_subtype",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationSubtype"),
			},
			{
				Name:     "integration_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationType"),
			},
			{
				Name:     "integration_uri",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationUri"),
			},
			{
				Name:     "passthrough_behavior",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PassthroughBehavior"),
			},
			{
				Name:     "payload_format_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PayloadFormatVersion"),
			},
			{
				Name:     "request_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestParameters"),
			},
			{
				Name:     "request_templates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestTemplates"),
			},
			{
				Name:     "response_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResponseParameters"),
			},
			{
				Name:     "template_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TemplateSelectionExpression"),
			},
			{
				Name:     "timeout_in_millis",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TimeoutInMillis"),
			},
			{
				Name:     "tls_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TlsConfig"),
			},
		},
	}
}

func fetchApigatewayv2ApiIntegrations(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Apigatewayv2

	r1 := parent.Item.(types.Api)

	input := apigatewayv2.GetIntegrationsInput{
		ApiId: r1.ApiId,
	}

	for {
		response, err := svc.GetIntegrations(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		res <- response.Items

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
