// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package cloudformation

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	resolvers "github.com/cloudquery/cloudquery/plugins/source/aws/codegenmain/resolvers/cloudformation"
)

func CloudformationStackResources() *schema.Table {
	return &schema.Table{
		Name:      "aws_cloudformation_stack_resources",
		Resolver:  fetchCloudformationStackResources,
		Multiplex: client.ServiceAccountRegionMultiplexer("cloudformation"),
		Columns: []schema.Column{
			{
				Name:     "last_updated_timestamp",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastUpdatedTimestamp"),
			},
			{
				Name:     "logical_resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LogicalResourceId"),
			},
			{
				Name:     "resource_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceStatus"),
			},
			{
				Name:     "resource_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceType"),
			},
			{
				Name:     "drift_information",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DriftInformation"),
			},
			{
				Name:     "module_info",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ModuleInfo"),
			},
			{
				Name:     "physical_resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PhysicalResourceId"),
			},
			{
				Name:     "resource_status_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceStatusReason"),
			},
		},
	}
}

func fetchCloudformationStackResources(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Cloudformation

	r1 := parent.Item.(types.Stack)

	input := cloudformation.ListStackResourcesInput{
		StackName: r1.StackName,
	}

	for {
		response, err := svc.ListStackResources(ctx, &input)
		if err != nil {

			if client.IsErrorRegex(err, "ValidationError", resolvers.ValidStackNotFoundRegex) {
				meta.Logger().Debug("received ValidationError on ListStackResources, stack does not exist", "region", cl.Region, "err", err)
				return nil
			}

			return diag.WrapError(err)
		}

		res <- response.StackResourceSummaries

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
