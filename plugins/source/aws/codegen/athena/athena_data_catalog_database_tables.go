// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package athena

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/athena/types"
)

func AthenaDataCatalogDatabaseTables() *schema.Table {
	return &schema.Table{
		Name:      "aws_athena_data_catalog_database_tables",
		Resolver:  fetchAthenaDataCatalogDatabaseTables,
		Multiplex: client.ServiceAccountRegionMultiplexer("athena"),
		Columns: []schema.Column{
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "columns",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Columns"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreateTime"),
			},
			{
				Name:     "last_access_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastAccessTime"),
			},
			{
				Name:     "parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Parameters"),
			},
			{
				Name:     "partition_keys",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PartitionKeys"),
			},
			{
				Name:     "table_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TableType"),
			},
		},
	}
}

func fetchAthenaDataCatalogDatabaseTables(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Athena

	r2 := parent.Item.(types.Database)
	parent = parent.Parent

	r1 := parent.Item.(types.DataCatalog)

	input := athena.ListTableMetadataInput{
		DatabaseName: r2.Name,
		CatalogName:  r1.Name,
	}

	for {
		response, err := svc.ListTableMetadata(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}
		res <- response.TableMetadataList
		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
