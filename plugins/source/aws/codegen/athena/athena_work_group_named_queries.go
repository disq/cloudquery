// Code generated by codegen using template resource_list_describe.go.tpl; DO NOT EDIT.

package athena

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/athena/types"

	"github.com/aws/aws-sdk-go-v2/service/athena"
)

func AthenaWorkGroupNamedQueries() *schema.Table {
	return &schema.Table{
		Name:      "aws_athena_work_group_named_queries",
		Resolver:  fetchAthenaWorkGroupNamedQueries,
		Multiplex: client.ServiceAccountRegionMultiplexer("athena"),
		Columns: []schema.Column{
			{
				Name:     "workgroup_cq_id",
				Type:     schema.TypeUUID,
				Resolver: schema.ParentIdResolver,
			},
			{
				Name:     "database",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Database"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "query_string",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("QueryString"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "named_query_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NamedQueryId"),
			},
			{
				Name:     "work_group",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WorkGroup"),
			},
		},
	}
}

func fetchAthenaWorkGroupNamedQueries(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Athena

	r1 := parent.Item.(types.WorkGroup)

	input := athena.ListNamedQueriesInput{
		WorkGroup: r1.Name,
	}
	paginator := athena.NewListNamedQueriesPaginator(svc, &input)
	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {

			return diag.WrapError(err)
		}

		for _, item := range output.NamedQueryIds {

			do, err := svc.GetNamedQuery(ctx, &athena.GetNamedQueryInput{

				NamedQueryId: &item,
			})
			if err != nil {

				if cl.IsNotFoundError(err) {
					continue
				}
				return diag.WrapError(err)
			}
			res <- do.NamedQuery
		}
	}
	return nil
}
