// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package cloudwatch

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
)

func CloudwatchAlarms() *schema.Table {
	return &schema.Table{
		Name:      "aws_cloudwatch_alarms",
		Resolver:  fetchCloudwatchAlarms,
		Multiplex: client.ServiceAccountRegionMultiplexer("cloudwatch"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "actions_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ActionsEnabled"),
			},
			{
				Name:     "alarm_actions",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AlarmActions"),
			},
			{
				Name:     "alarm_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AlarmArn"),
			},
			{
				Name:     "alarm_configuration_updated_timestamp",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("AlarmConfigurationUpdatedTimestamp"),
			},
			{
				Name:     "alarm_description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AlarmDescription"),
			},
			{
				Name:     "alarm_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AlarmName"),
			},
			{
				Name:     "comparison_operator",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ComparisonOperator"),
			},
			{
				Name:     "datapoints_to_alarm",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DatapointsToAlarm"),
			},
			{
				Name:     "dimensions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Dimensions"),
			},
			{
				Name:     "evaluate_low_sample_count_percentile",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EvaluateLowSampleCountPercentile"),
			},
			{
				Name:     "evaluation_periods",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("EvaluationPeriods"),
			},
			{
				Name:     "extended_statistic",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExtendedStatistic"),
			},
			{
				Name:     "insufficient_data_actions",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("InsufficientDataActions"),
			},
			{
				Name:     "metric_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MetricName"),
			},
			{
				Name:     "metrics",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metrics"),
			},
			{
				Name:     "namespace",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Namespace"),
			},
			{
				Name:     "ok_actions",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("OKActions"),
			},
			{
				Name:     "period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Period"),
			},
			{
				Name:     "state_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StateReason"),
			},
			{
				Name:     "state_reason_data",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StateReasonData"),
			},
			{
				Name:     "state_updated_timestamp",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("StateUpdatedTimestamp"),
			},
			{
				Name:     "state_value",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StateValue"),
			},
			{
				Name:     "statistic",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Statistic"),
			},
			{
				Name:     "threshold",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Threshold"),
			},
			{
				Name:     "threshold_metric_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ThresholdMetricId"),
			},
			{
				Name:     "treat_missing_data",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TreatMissingData"),
			},
			{
				Name:     "unit",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Unit"),
			},
		},
	}
}

func fetchCloudwatchAlarms(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Cloudwatch

	input := cloudwatch.DescribeAlarmsInput{}

	for {
		response, err := svc.DescribeAlarms(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		res <- response.MetricAlarms

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
