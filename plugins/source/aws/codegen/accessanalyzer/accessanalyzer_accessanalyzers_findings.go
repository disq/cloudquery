// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package accessanalyzer

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/accessanalyzer"
	"github.com/aws/aws-sdk-go-v2/service/accessanalyzer/types"
)

func AccessAnalyzerAccessanalyzersFindings() *schema.Table {
	return &schema.Table{
		Name:      "aws_accessanalyzer_accessanalyzers_findings",
		Resolver:  fetchAccessAnalyzerAccessanalyzersFindings,
		Multiplex: client.ServiceAccountRegionMultiplexer("accessanalyzer"),
		Columns: []schema.Column{
			{
				Name:     "analyzed_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("AnalyzedAt"),
			},
			{
				Name:     "condition",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Condition"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "resource_owner_account",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceOwnerAccount"),
			},
			{
				Name:     "resource_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceType"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "action",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Action"),
			},
			{
				Name:     "error",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Error"),
			},
			{
				Name:     "is_public",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsPublic"),
			},
			{
				Name:     "principal",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Principal"),
			},
			{
				Name:     "resource",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Resource"),
			},
			{
				Name:     "sources",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Sources"),
			},
		},
	}
}

func fetchAccessAnalyzerAccessanalyzersFindings(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().AccessAnalyzer

	r1 := parent.Item.(types.AnalyzerSummary)

	input := accessanalyzer.ListFindingsInput{
		AnalyzerArn: r1.Arn,
	}

	for {
		response, err := svc.ListFindings(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		res <- response.Findings

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
