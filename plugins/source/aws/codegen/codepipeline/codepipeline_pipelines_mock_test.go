// Code generated by codegen using template resource_list_describe_mock_test.go.tpl; DO NOT EDIT.

package codepipeline

import (
	"testing"

	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client/mocks"
	"github.com/cloudquery/faker/v3"
	"github.com/golang/mock/gomock"

	"github.com/aws/aws-sdk-go-v2/service/codepipeline"
)

func buildCodePipelinePipelines(t *testing.T, ctrl *gomock.Controller) client.Services {
	mock := mocks.NewMockCodePipelineClient(ctrl)

	var item types.PipelineSummary
	if err := faker.FakeData(&item); err != nil {
		t.Fatal(err)
	}
	mock.EXPECT().ListPipelines(
		gomock.Any(),
		&codepipeline.ListPipelinesInput{},
		gomock.Any(),
	).Return(
		&codepipeline.ListPipelinesOutput{

			Pipelines: []types.PipelineSummary{item},
		},
		nil,
	)

	var detail codepipeline.GetPipelineOutput
	if err := faker.FakeData(&detail); err != nil {
		t.Fatal(err)
	}

	detail.Name = item.Name

	detail.Version = item.Version

	mock.EXPECT().GetPipeline(
		gomock.Any(),
		&codepipeline.GetPipelineInput{

			Name: item.Name,

			Version: item.Version,
		},
		gomock.Any(),
	).Return(

		&detail,

		nil,
	)

	return client.Services{
		CodePipeline: mock,
	}
}

func TestCodePipelinePipelines(t *testing.T) {
	client.AwsMockTestHelper(t, CodePipelinePipelines(), buildCodePipelinePipelines, client.TestOptions{})
}
