// Code generated by codegen using template resource_list_describe.go.tpl; DO NOT EDIT.

package codepipeline

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/codepipeline"
)

func CodePipelinePipelines() *schema.Table {
	return &schema.Table{
		Name:      "aws_codepipeline_pipelines",
		Resolver:  fetchCodePipelinePipelines,
		Multiplex: client.ServiceAccountRegionMultiplexer("codepipeline"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "pipeline",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Pipeline"),
			},
		},
	}
}

func fetchCodePipelinePipelines(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().CodePipeline

	input := codepipeline.ListPipelinesInput{}
	paginator := codepipeline.NewListPipelinesPaginator(svc, &input)
	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {

			return diag.WrapError(err)
		}

		for _, item := range output.Pipelines {

			do, err := svc.GetPipeline(ctx, &codepipeline.GetPipelineInput{

				Name: item.Name,

				Version: item.Version,
			})
			if err != nil {

				if cl.IsNotFoundError(err) {
					continue
				}
				return diag.WrapError(err)
			}
			res <- do
		}
	}
	return nil
}
