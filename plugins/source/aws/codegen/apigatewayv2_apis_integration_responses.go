// Code generated by codegen; DO NOT EDIT.

package codegen

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
)

func Apigatewayv2ApisIntegrationResponses() *schema.Table {

	return &schema.Table{
		Name:      "aws_apigatewayv2_integrationresponses",
		Resolver:  fetchApigatewayv2ApisIntegrationResponses,
		Multiplex: client.ServiceAccountRegionMultiplexer("apigatewayv2"),
		Columns: []schema.Column{
			{
				Name:     "integration_response_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationResponseKey"),
			},
			{
				Name:     "content_handling_strategy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ContentHandlingStrategy"),
			},
			{
				Name:     "integration_response_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationResponseId"),
			},
			{
				Name:     "response_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResponseParameters"),
			},
			{
				Name:     "response_templates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResponseTemplates"),
			},
			{
				Name:     "template_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TemplateSelectionExpression"),
			},
		},
	}
}

func fetchApigatewayv2ApisIntegrationResponses(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {

	cl := meta.(*client.Client)
	svc := cl.Services().Apigatewayv2

	r := parent.Item.(types.Api)
	input := apigatewayv2.GetIntegrationResponsesInput{
		IntegrationId: r.IntegrationId,
	}

	for {
		response, err := svc.GetIntegrationResponses(ctx, &input)
		if err != nil {
			return diag.WrapError(err)
		}
		res <- response.Items
		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
