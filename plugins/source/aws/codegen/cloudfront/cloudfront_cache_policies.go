// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package cloudfront

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"

	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	resolvers "github.com/cloudquery/cloudquery/plugins/source/aws/codegenmain/resolvers/cloudfront"
)

func CloudfrontCachePolicies() *schema.Table {
	return &schema.Table{
		Name:      "aws_cloudfront_cache_policies",
		Resolver:  fetchCloudfrontCachePolicies,
		Multiplex: client.ServiceAccountRegionMultiplexer("cloudfront"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:     "cache_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CachePolicy"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolvers.ResolveCachePolicyArn,
			},
		},
	}
}

func fetchCloudfrontCachePolicies(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Cloudfront

	input := cloudfront.ListCachePoliciesInput{}

	for {
		response, err := svc.ListCachePolicies(ctx, &input)
		if err != nil {

			return diag.WrapError(err)
		}

		if response.CachePolicyList != nil {
			res <- response.CachePolicyList.Items
			if aws.ToString(response.CachePolicyList.NextMarker) == "" {
				break
			}
			input.Marker = response.CachePolicyList.NextMarker
		}
		if response.CachePolicyList == nil {
			break
		}

	}
	return nil
}
